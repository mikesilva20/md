<?xml version="1.0" encoding="UTF-8" ?>
<script name="omCommon.aesDecrypt">
  <group>symetricCryptographyAlgorithms</group>
  <label>AES Decrypt</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="ciphertext" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="password" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="nBits" type="rifp">
      <type>dtype_com.conceptwave.system.Integer</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
    /*  AES Counter-mode implementation in JavaScript (c) Chris Veness 2005-2012                      */
    /*   - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf                       */
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

    /**
     * Decrypt a text encrypted by AES in counter mode of operation
     *
     * @param {String} ciphertext Source text to be encrypted
     * @param {String} password   The password to use to generate a key
     * @param {Number} nBits      Number of bits to be used in the key (128, 192, or 256)
     * @returns {String}          Decrypted text
     */

     var aesHelper = omCommon.aesAlgorithmHelper();
     var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES
     // standard allows 128/192/256 bit keys
     if (!nBits){
         nBits = 256;
     }
     ciphertext = aesHelper.base64Decode(ciphertext);
     password = aesHelper.utf8Encode(password);
     //var t = new Date();  // timer

     // use AES to encrypt password (mirroring encrypt routine)
     var nBytes = nBits/8;  // no bytes in key
     var pwBytes = new Array(nBytes);
     for (var i=0; i<nBytes; i++) {
         pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);
     }
     var key = aesHelper.cipher(pwBytes, aesHelper.keyExpansion(pwBytes));
     key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long

     // recover nonce from 1st 8 bytes of ciphertext
     var counterBlock = new Array(8);
     var ctrTxt = ciphertext.slice(0, 8);
     for (var i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);

     // generate key schedule
     var keySchedule = aesHelper.keyExpansion(key);

     // separate ciphertext into blocks (skipping past initial 8 bytes)
     var nBlocks = Math.ceil((ciphertext.length-8) / blockSize);
     var ct = new Array(nBlocks);
     for (var b=0; b<nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);
     ciphertext = ct;  // ciphertext is now array of block-length strings

     // plaintext will get generated block-by-block into array of block-length strings
     var plaintxt = new Array(ciphertext.length);

     for (var b=0; b<nBlocks; b++) {
         // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)
         for (var c=0; c<4; c++) counterBlock[15-c] = ((b) >>> c*8) & 0xff;
         for (var c=0; c<4; c++) counterBlock[15-c-4] = (((b+1)/0x100000000-1) >>> c*8) & 0xff;

         var cipherCntr = aesHelper.cipher(counterBlock, keySchedule);  // encrypt counter block

         var plaintxtByte = new Array(ciphertext[b].length);
         for (var i=0; i<ciphertext[b].length; i++) {
             // -- xor plaintxt with ciphered counter byte-by-byte --
             plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);
             plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);
         }
         plaintxt[b] = plaintxtByte.join('');
     }

     // join array of blocks into single plaintext string
     var plaintext = plaintxt.join('');
     plaintext = aesHelper.utf8Decode(plaintext);  // decode from UTF8 back to Unicode multi-byte chars

     //alert((new Date()) - t);
     return plaintext;
  ]]></script>
</script>