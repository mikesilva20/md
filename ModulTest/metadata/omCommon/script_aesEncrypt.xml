<?xml version="1.0" encoding="UTF-8" ?>
<script name="omCommon.aesEncrypt">
  <group>symetricCryptographyAlgorithms</group>
  <label>AES Encrypt</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="plaintext" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="password" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="nBits" type="rifp">
      <type>dtype_com.conceptwave.system.Integer</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
    /*  AES Counter-mode implementation in JavaScript (c) Chris Veness 2005-2012                      */
    /*   - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf                       */
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

    /**
     * Encrypt a text using AES encryption in Counter mode of operation
     *
     * Unicode multi-byte character safe
     *
     * @param {String} plaintext Source text to be encrypted
     * @param {String} password  The password to use to generate a key
     * @param {Number} nBits     Number of bits to be used in the key (128, 192, or 256)
     * @returns {string}         Encrypted text
     */

     var aesHelper = omCommon.aesAlgorithmHelper();
     var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES
     // standard allows 128/192/256 bit keys
     if (!nBits){
         nBits = 256;
     }

     plaintext = aesHelper.utf8Encode(plaintext);
     password = aesHelper.utf8Encode(password);
     //var t = new Date();  // timer

     // use AES itself to encrypt password to get cipher key (using plain password as source for key
     // expansion) - gives us well encrypted key (though hashed key might be preferred for prod'n use)
     var nBytes = nBits/8;  // no bytes in key (16/24/32)
     var pwBytes = new Array(nBytes);
     for (var i=0; i<nBytes; i++) {  // use 1st 16/24/32 chars of password for key
         pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);
     }

     var key = aesHelper.cipher(pwBytes, aesHelper.keyExpansion(pwBytes));  // gives us 16-byte key
     key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long

     // initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A Â§B.2): [0-1] = millisec,
     // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106
     var counterBlock = new Array(blockSize);

     var nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970
     var nonceMs = nonce%1000;
     var nonceSec = Math.floor(nonce/1000);
     var nonceRnd = Math.floor(Math.random()*0xffff);

     for (var i=0; i<2; i++) counterBlock[i]   = (nonceMs  >>> i*8) & 0xff;
     for (var i=0; i<2; i++) counterBlock[i+2] = (nonceRnd >>> i*8) & 0xff;
     for (var i=0; i<4; i++) counterBlock[i+4] = (nonceSec >>> i*8) & 0xff;

     // and convert it to a string to go on the front of the ciphertext
     var ctrTxt = '';
     for (var i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);

     // generate key schedule - an expansion of the key into distinct Key Rounds for each round
     var keySchedule = aesHelper.keyExpansion(key);

     var blockCount = Math.ceil(plaintext.length/blockSize);
     var ciphertxt = new Array(blockCount);  // ciphertext as array of strings

     for (var b=0; b<blockCount; b++) {
         // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)
         // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)
         for (var c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;
         for (var c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8)

         var cipherCntr = aesHelper.cipher(counterBlock, keySchedule);  // -- encrypt counter block --

         // block size is reduced on final block
         var blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;
         var cipherChar = new Array(blockLength);

         for (var i=0; i<blockLength; i++) {  // -- xor plaintext with ciphered counter char-by-char --
             cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);
             cipherChar[i] = String.fromCharCode(cipherChar[i]);
         }
         ciphertxt[b] = cipherChar.join('');
     }

     // Array.join is more efficient than repeated string concatenation in IE
     var ciphertext = ctrTxt + ciphertxt.join('');
     ciphertext = aesHelper.base64Encode(ciphertext);  // encode in base64

     //alert((new Date()) - t);
     return ciphertext;
  ]]></script>
</script>